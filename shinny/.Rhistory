inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "perc")
#We can easily use the standard error method by changing the boot_method:
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "se")
#
#Or create an interval for the median instead of the mean:
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
View(nc)
source("http://www.openintro.org/stat/data/cdc.R")
smoke = table(cdc$smoke100)
barplot(smoke)
smoker=cdc[cdc$smoke100=="1",]
boxplot(cdc$BMI ~ cdc$genhlth)
smoker=cdc[cdc$smoke100=="1",]
under23_smoker=smoker[smoker$age<23,]
cdc$BMI=(cdc$weight)*703/((cdc$height)^2)
boxplot(cdc$BMI ~ cdc$genhlth)
boxplot(nc$habit~nc$weight)
boxplot(nc$weight~nc$habit)
View(nc)
nonsmoker=nc[nc$habit=="nonsmoker",]
smoker=nc[nc$habit=="smoker"]
par(mfrow = c(2,1))
hist(nonsmoker$weight, )
hist(smoker$weight, )
View(nc)
nonsmoker=nc[nc$habit=="nonsmoker",]
smoker=nc[nc$habit=="smoker",]
par(mfrow = c(2,1))
hist(nonsmoker$weight)
hist(smoker$weight)
hist(nonsmoker$weight,breaks=0.1)
hist(nonsmoker$weight,breaks=0.1,)
hist(nonsmoker$weight,breaks=10,)
hist(nonsmoker$weight,breaks=10,na.omit=TRUE)
par(mfrow = c(2,1))
xlimits=range(nonsmoker$weight)
hist(nonsmoker$weight,breaks=10,na.omit=TRUE,xlim = xlimits)
xlimits=range(smoker$weight)
hist(smoker$weight,breaks=10,)
par(mfrow = c(1,2))
xlimits=range(nonsmoker$weight)
hist(nonsmoker$weight,breaks=10,na.omit=TRUE,xlim = xlimits)
xlimits=range(smoker$weight)
hist(smoker$weight,breaks=10,)
xlimits=range(nonsmoker$weight,na.omit=TRUE)
hist(nonsmoker$weight,breaks=10,na.omit=TRUE,xlim = xlimits)
xlimits=range(smoker$weight)
hist(smoker$weight,breaks=10,)
par(mfrow = c(1,2))
xlimits=range(nonsmoker$weight,na.omit=TRUE)
hist(nonsmoker$weight,breaks=10,na.omit=TRUE,xlim = xlimits)
par(mfrow = c(1,2))
hist(nonsmoker$weight,breaks=10,na.omit=TRUE)
hist(smoker$weight,breaks=10,)
par(mfrow = c(1,2))
hist(nonsmoker$weight,breaks=10)
hist(smoker$weight,breaks=10)
par(mfrow = c(1,2))
ist(nonsmoker$weight,breaks=10)
hist(nonsmoker$weight,breaks=10)
hist(smoker$weight,breaks=10)
summary(nonsmoker$weight)
summary(smoker$weight)
by(nc$weight, nc$habit, mean)
summary(nonsmoker$weight)
summary(smoker$weight)
#Next, we’ll use the inference for evaluating whether there is a difference between the average birth weights of babies born to smoker and non-smoker mothers.
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical",conflevel = 0.95)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical",conflevel = 0.95)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
View(nc)
load(url("http://bit.ly/dasi_gss_ws_cl"))
#Task B
load(url("http://d396qusza40orc.cloudfront.net/statistics/lab_resources/gss.RData"))
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
summary(nonsmoker$weight)
summary(smoker$weight)
pnorm(0.95,0.9,0.0212)
1-pnorm(0.95,0.9,0.0212)
install.packages("corrplot")
The data is implanted in the R pacage: datasets. All data has been collected by the author of the datasets package. Cars are the units of observation in this observational study. As is described above, people who are going to change or buy cars might be interested. Also, governers in charge of environment protection should also be interested. The main problem of the dataset is that if it is aimed to promote a specific kind of cars, which might lead to a better figure of a certain kind of cars. However, the data should still be enough to offer a comparation of two kinds of cars.
### Part1 Figure2
mtcars
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
View(mlb11)
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
plot(mlbll$runs~mlbll$rat_bats)
mlbll
mlb11
plot(mlb11$runs ~ mlb11$rat_bats)
plot(mlb11$runs ~ mlb11$at_bats)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
rbind(m1$residuals,mlb11$at_bats)
cbind(m1$residuals , mlb11$at_bats)
a=cbind(m1$residuals , mlb11$at_bats)
a[,a[,2]=5579]
a[,a[,2]==5579]
a[,a[2,]==5579]
a[,a[,2]==5579]
a[,2]
cbind(m1$residuals , mlb11$at_bats,name=c(residuals,at-bats))
cbind(m1$residuals , mlb11$at_bats,name=c(residuals,at_bats))
cbind(m1$residuals , mlb11$at_bats,name=c("residuals","at_bats"))
cbind(m1$residuals , mlb11$at_bats,row.names=c("residuals","at_bats"))
??cbind
cbind(residuals=m1$residuals , at_bats=mlb11$at_bats)
a<-cbind(residuals=m1$residuals , at_bats=mlb11$at_bats)
a[which(a$Gender==at_bats),]
a[which(a$at_bats==5579),]
a=data.frame(a)
a[which(a$at_bats==5579),]
#偏差图
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
hist(m1$residuals)
summary(m1)
m1
m1$p
summary(m1)$p
summary(m1)$P
summary(m1)$PR
summary(m1)$Pr
m1$Pr
hist(m1$residuals)
library(ggplot2)
Leastsquares <- function(x,y) {
#x,y
rm(list=ls())
lenx <- length(x)
leny <- length(y)
s <- 0
t<-0
if (lenx != leny)
stop("length(x) != length(y)")
avgx <- mean(x)
avgy <- mean(y)
for(i in 1:lenx) {
s <- s + (x[i]-avgx)*(y[i]-avgy)
t <- t + (x[i] - avgx)^2
}
s <- s/t
t <- avgy - s*avgx
f<-function(a) {s*a+t}
base<-qplot(x,y,colour="red",size=2)
base + stat_function(fun=f,colour="blue",size=1)
}
mlb11[,2]
Leastsquares(mlb11$runs,mlb11$at_bats)
mlb11$runs
mlb11$at_bats
Leastsquares(mlb11$runs, mlb11$at_bats)
length(mlb11$runs)
length(mlb11$at_bats)
Leastsquares <- function(x,y) {
#x,y
lenx <- length(x)
leny <- length(y)
s <- 0
t<-0
if (lenx != leny)
stop("length(x) != length(y)")
avgx <- mean(x)
avgy <- mean(y)
for(i in 1:lenx) {
s <- s + (x[i]-avgx)*(y[i]-avgy)
t <- t + (x[i] - avgx)^2
}
s <- s/t
t <- avgy - s*avgx
f<-function(a) {s*a+t}
base<-qplot(x,y,colour="red",size=2)
base + stat_function(fun=f,colour="blue",size=1)
}
Leastsquares(mlb11$runs, mlb11$at_bats)
lm(runs ~ at_bats, data = mlb11)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
a<-summary(m1)
a
a$r.squared
ncol(mlb11)
for i in 3:ncol(mlb11){
for i in (3:ncol(mlb11)){
ncol(mlb11)
n=ncol(mlb11)
id=3:n
for i in id{
for (i in id){
}
if (a$r.squared>max){
max=a$r.squared
id=i
}
max=0
if (a$r.squared>max){
max=a$r.squared
id=i
}
max
col.names(mlb11)
colnames(mlb11)
colnames(mlb11[,2])
colname<-colnames(mlb11)
colname[1,]
colname[,1]
colname(1)
colname[1]
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
for (i in id){
m1 <- lm(runs ~ mlb11[,i], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
colname<-colnames(mlb11)
colname[idr]
}
for (i in id){
m1 <- lm(runs ~ mlb11[,i], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
for (i in id){
m1 <- lm(runs ~ mlb11[,i])
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
colname<-colnames(mlb11)
colname[idr]
}
}
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
for (i in id){
m1 <- lm(runs ~ mlb11[,i])
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
colname<-colnames(mlb11)
colname[idr]
}
mlb11[,3]
runs
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
m1 <- lm(runs ~ colname[idr], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[idr]
}
}
for (i in id){
m1 <- lm(runs ~ colname[idr], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[id]
}
}
for (i in id){
m1 <- lm(runs ~ colname[id], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[id]
}
}
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
m1 <- lm(runs ~ colname[i], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
}
for (i in id){
m1 <- lm(colname[2] ~ colname[i], data = mlb11)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
}
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
var<- mlb11[,i]
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
}
var<- mlb11[,4]
var
mode(var)
a<-c(1,2,3,4)
mode(a)
n=ncol(mlb11)
runs=mlb11[,2]
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
var<- mlb11[,i]
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=i
}
}
runs=as.list(mlb11[,2])
runs=as.list(mlb11[,2])
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
var<- as.list(mlb11[,i])
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[i]
}
}
runs=mlb11[,2]
i=5
var<- as.list(mlb11[,i])
m1 <- lm(runs ~ var)
??type()
type(var)
typeof(var)
a<-(0,1,2,3,)
a<-(0,1,2,3,4)
a<-c(0,1,2,3,4)
typeof(a)
var<- as.double(mlb11[,i])
var
runs=as.double(mlb11[,2])
m1 <- lm(runs ~ var)
runs=as.double(mlb11[,2])
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
var<- as.double(mlb11[,i])
m1 <- lm(runs ~ a<var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[i]
}
idr
}
runs=as.double(mlb11[,2])
n=ncol(mlb11)
id=3:n
max=0
id=0
colname<-colnames(mlb11)
for (i in id){
var<- as.double(mlb11[,i])
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[i]
}
idr
}
runs=as.double(mlb11[,2])
n=ncol(mlb11)
id=3:n
max=0
colname<-colnames(mlb11)
for (i in id){
var<- as.double(mlb11[,i])
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[i]
}
idr
}
idr
runs=as.double(mlb11[,2])
n=ncol(mlb11)
id=c(3,4,6,9)
max=0
colname<-colnames(mlb11)
for (i in id){
var<- as.double(mlb11[,i])
m1 <- lm(runs ~ var)
a<-summary(m1)
if (a$r.squared>max){
max=a$r.squared
idr=colname[i]
}
idr
}
idr
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
install.packages("data.table")
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
summary(probabilityTable)
summary(nc)
summary(ProbabilityTable)
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shinyapps::setAccountInfo(name='marcoxu93',
token='062B47CBE102F94F50405B023A762DE3',
secret='<SECRET>')
shinyapps::setAccountInfo(name='marcoxu93', token='062B47CBE102F94F50405B023A762DE3', secret='sZ9gbd6cdwL+v8DBrpa2ObrHVXCNuqRPjWK1CV4J')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
shiny::runApp('H:/open course/introduction to Rprogramming Hopkins/Data-Science-Capstone-Project/shinny')
wordcloud(predictedWords()[1:20], c(20,15,12,10,8,6,4,3,3,3,3,3,3,3,3,3,3,3,3,3) ,random.order=T, max.words=200, colors=brewer.pal(8, "Dark2"))
predictedWords <-predictThis("I")
library(shiny)
library(wordcloud)
source("Predict.R")
predictedWords <-predictThis("I")
summary(predictedWords)
library(shiny)
library(wordcloud)
setwd("H:\open course\introduction to Rprogramming Hopkins\Data-Science-Capstone-Project\shinny")
source("Predict.R")
predictedWords <-predictThis("I")
summary(predictedWords)
library(shiny)
library(wordcloud)
setwd("H:\\open course\\introduction to Rprogramming Hopkins\\Data-Science-Capstone-Project\\shinny")
source("Predict.R")
predictedWords <-predictThis("I")
summary(predictedWords)
predictedWords <-predictThis("I")
wordcloud(predictedWords()[1:20], c(20,15,12,10,8,6,4,3,3,3,3,3,3,3,3,3,3,3,3,3) ,random.order=T, max.words=200, colors=brewer.pal(8, "Dark2"))
wordcloud(predictedWords[1:20], c(20,15,12,10,8,6,4,3,3,3,3,3,3,3,3,3,3,3,3,3) ,random.order=T, max.words=200, colors=brewer.pal(8, "Dark2"))
shiny::runApp()
predictedWords <-predictThis("I")
wordcloud(predictedWords[1:20], c(20,15,12,10,8,6,4,3,3,3,3,3,3,3,3,3,3,3,3,3) ,random.order=F, max.words=200, colors=brewer.pal(8, "Dark2"))
